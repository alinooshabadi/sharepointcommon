<p>Migrated from codeplex: <a href="https://sharepointcommon.codeplex.com">https://sharepointcommon.codeplex.com</a><br /><br />
latest news on twitter: <a href="http://twitter.com/shpcommon">http://twitter.com/shpcommon</a></p>
<h1><strong>Project Description</strong></h1>
<p><strong>SharepointCommon</strong> is a framework for Microsoft SharePoint&copy; 2010 ,2013 and <strong>2016</strong><br /><br />It allows to map list items to simple hand-writen POCO classes and perform actions by manipulating with entities.<br />At future planned to support more functionality: event receivers, timer jobs, workflows, users and etc.</p>
<h1><strong>Project Goals</strong></h1>
<ul>
<li>abstract layer on Sharepoint object model</li>
<li>simplifying recurring routine actions</li>
<li>ability to unit test</li>
<li>make all operations typed</li>
</ul>
<h1><strong>Features</strong></h1>
<ul>
<li>create wrappers on a SPSite/SPWeb, opened by url or Ids in normal/elevated/unsafe/impersonated mode*</li>
<li>create wrappers on a SPList by list title, Id or Url</li>
<li>use lists as repositories, can override methods, add business specific logic</li>
<li>create lists by wrapper and ensure fields by typed entity/content type</li>
<li>get items by typed query</li>
<li>create typed event receivers(since 2.0)</li>
<li><strong>get items by LINQ query (preview in 3.0)</strong></li>
<li>get items by Id, Guid or value of specified field</li>
<li>add items(or items of specific content type) by typed entity</li>
<li>update items by typed entity</li>
<li>delete items by entity</li>
<li>lazy access to any entity property archived by using <a href="http://www.castleproject.org/">Castle Dynamic Proxy</a></li>
<li>CAML strings constructing by <a href="http://camldotnet.codeplex.com/">Caml.NET</a> with typed extentions</li>
<li>LINQ provider implemented with Re-LInq and POCO-To-CAML</li>
</ul>
<h1><strong>Development roadmap</strong></h1>
<ul>
<li>more complete LINQ implementation</li>
<li>support for BCS and Metadata firlds</li>
</ul>
<h1><strong>Limitations</strong></h1>
<ul>
<li>use carefully with huge amount of data: code uses a lot of reflection!</li>
</ul>
<h1><strong>Get started</strong></h1>
<p>Best way to get started with library is using nuget to add library to project. Now nugget package available both for SharePoint 2010 and 2013.<br /><br />Or you can get required files at download page <a href="https://sharepointcommon.codeplex.com/releases/view/611058">SharepointCommon latest release</a><br /><br />To use library in farm solutions it need to be deployed to GAC. It may be performed manually by <em>gacutil</em> or adding dll to another sharepoint wsp package.<br /><br />After deployed, library may be referenced and used from any .net 3.5 project (.Net 4.0 and 4.5 for SharePoint 2013)</p>
<h1><strong>Basic example of using</strong></h1>
<h2>Entity class example:</h2>
<pre>public class CustomItem : Item
{
     public virtual string CustomField1 { get; set; }
     public virtual double? CustomFieldNumber { get; set; }
     public virtual bool? CustomBoolean { get; set; }
     public virtual DateTime? CustomDate { get; set; }
     public virtual User CustomUser { get; set; }
     public virtual IEnumerable&lt;User&gt; CustomUsers { get; set; }

     [Field(LookupList = "ListForLookup")]
     public virtual Item CustomLookup { get; set; }

     [Field(LookupList = "ListForLookup")]
     public virtual IEnumerable&lt;Item&gt; CustomMultiLookup { get; set; }
}
</pre>
<p>&nbsp;</p>
<h2>Entity class for specific content type:</h2>
<pre>    [ContentType("0x0104")]
    public class Announcement : Item
    {
        public virtual string Body { get; set; }
        public virtual DateTime Expires { get; set; }
    }
</pre>
<h2>Application class example:</h2>
<pre>public class TestApp : AppBase&lt;TestApp&gt;
{
   [List(Url = "lists/contract")]
   public virtual IQueryList&lt;Contract&gt; Contracts { get; set; }

   [List(Name = "Purchase Request")]
   public virtual IQueryList&lt;PurchaseRequest&gt; PurchaseRequest { get; set; }

   [List(Id = "8A083287-CAEF-4DFA-8246-E8236676F5A1")]
   public virtual IQueryList&lt;Order&gt; Orders { get; set; }
}
</pre>
<p>&nbsp;</p>
<h2>Get Application instance:</h2>
<pre>using (var app = TestApp.Factory.OpenNew("http://server-url/"))
{
    // app.QueryWeb - wrapper on SPSite and SPWeb
    var contract = app.Contracts;
    var prs = app.PurchaseRequest;
    var orders = app.Orders;
}
</pre>
<h2>Open SPSite and SPWeb in Elevated mode</h2>
<p>In previous example, elevate existing: <span class="codeInline"> factory.Elevate(); </span><br />Or open new:</p>
<pre>using (var factory = TestApp.Factory.ElevatedNew("http://server-url/")) { }
</pre>
<h2>Create list for <span class="codeInline"> CustomItem </span></h2>
<pre>using (var wf = WebFactory.Open("http://server-url/"))
{
     var list = wf.Create&lt;CustomItem&gt;("TestList");
}
</pre>
<h2>Adding item to list:</h2>
<pre>// create two items for lookup fields
var lookupItem = new Item { Title = "item1" };
listForLookup.Add(lookupItem);

var lookupItem2 = new Item { Title = "item2" };
listForLookup.Add(lookupItem2);

// create item
var customItem = new CustomItem
{
      Title = "TestTitle",
      CustomField1 = "Field1",
      CustomFieldNumber = 123.5,
      CustomBoolean = true,
      CustomUser = new Person("DOMAIN\USER1"),
      CustomUsers = new  {  new Person("DOMAIN\USER1") },
      CustomLookup = lookupItem,
      CustomMultiLookup = new List&lt;Item&gt; { lookupItem, lookupItem2 },
      CustomDate = DateTime.Now,
};
list.Add(customItem);
</pre>
<h2>Upload documents to SharePoint library:</h2>
<pre>lib = _queryWeb.Create&lt;Document&gt;("TestLibrary");
var document = new Document
{
     Name = "TestFile.dat",
     Content = new byte[] { 5, 10, 15, 25 },
     RenameIfExists = true,
};
lib.Add(document);
</pre>
<h2>Get items by <em>Query</em>:</h2>
<pre> var items = list.Items(new CamlQuery()
    .Query(Q.Where(
        Q.Eq(
            Q.FieldRef&lt;Item&gt;(i =&gt; i.Title), 
            Q.Value("test"))))
   .ViewFields&lt;Item&gt;(i =&gt; i.Id, i =&gt; i.Title),
   .Recursive()
)
</pre>
<h2>Get items by LINQ query(preview in 3.0):</h2>
<pre>var items = list.Items().Where(i =&gt; i.Title == "test");
</pre>
<p><br />Converted to CAML:</p>
<pre>&lt;Where&gt;
  &lt;Eq&gt;     
     &lt;FieldRef  Name=&rdquo;Title&rdquo; /&gt; 
     &lt;Value Type=&rdquo;Text&rdquo;&gt;test&lt;/Value&gt;
  &lt;/Eq&gt;
&lt;/Where&gt;
</pre>
<p><br /><br />Query:</p>
<pre>var items = list.Items().Select(new { i.Title} );
</pre>
<p><br />Converted to CAML:</p>
<pre>&lt;Query/&gt;
&lt;ViewFields&gt;
  &lt;FieldRef Name="Title" /&gt;
&lt;/ViewFields&gt;
</pre>
<p><br /><br />More details about linq support see <a href="/wikipage?title=linq&amp;referringTitle=Home">here</a></p>
<h2>Get items of content type 'Announcement'</h2>
<pre>var items = list.Items&lt;Announcement&gt;(CamlQuery.Default);
</pre>
<h2>Update item</h2>
<pre>customItem.Title = "new value";            
list.Update(customItem, true); // update with increment version
</pre>
<h2>Update one field in item</h2>
<pre>customItem.Title = "new value";
_list.Update(customItem, true, i =&gt; i.Title); // update only 'Title'
</pre>
<h2>Delete items</h2>
<pre>_list.Delete(items.First(), false); // delete by entity, false to no move in recycle
_list.Delete(items.First().Id, false); // delete by id
</pre>
<p>&nbsp;</p>
<h1><strong>Documentation</strong></h1>
<p>All documentation available under codeplex 'documentation' tab <a href="/documentation?referringTitle=Home">Documentation</a><br /><a href="/wikipage?title=DocumentationRus&amp;referringTitle=Home">Документация на русском языке</a></p>
<h1><strong>Contribute</strong></h1>
<p>All code written are fully unit tested. All checkins must be tested with all previous tests.<br />We are welcome people to contribute the project. To be in, write me message with theme '<strong>contribute SharepointCommon</strong>'</p>
